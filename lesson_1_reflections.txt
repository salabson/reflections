How did viewing a diff between two version of a file help you to see bug that was introduced?
diff help help one to see what was added or remove from the file there making it easy to spot the bugs

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It help you see your previous code changes, previous bugs and how to get around them which help you to make better decision now and in 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
i think one should commit per logical change; the commit should not be too small and should not be also too large.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git allow saving multiple files one commit because Git was developed with programmers in mind; some code files are related change some lines of code in one file 
may cause ripple effects that require some line(s) of code in other file to be changed.

How can you use the commands git log and git diff to view the history of files?
First you enter command git log to see various commit point of the file then enter git diff command with two commit Ids to see the change made between the two commits

How might using version control make you more confident to make changes that could break something?
version control give you the ability to go back to previous version of the file that is Okay or without bugs

Now that you have your workspace set up, what do you want to try using Git for?
I want to use Git to track the changes in my code file so to enable trace bugs at diffrent commit points







The title consists of the type of the message and subject.

The Type
The type is contained within the title and can be one of these types:

feat: a new feature
fix: a bug fix
docs: changes to documentation
style: formatting, missing semi colons, etc; no code change
refactor: refactoring production code
test: adding tests, refactoring test; no production code change
chore: updating build tasks, package manager configs, etc; no production code change
The Subject
Subjects should be no greater than 50 characters, should begin with a capital letter and do not end with a period.

Use an imperative tone to describe what a commit does, rather than what it did. For example, use change; not changed or changes.

The Body
Not all commits are complex enough to warrant a body, therefore it is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how.

When writing a body, the blank line between the title and the body is required and you should limit the length of each line to no more than 72 characters.

The Footer
The footer is optional and is used to reference issue tracker IDs.

Example Commit Message
feat: Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789